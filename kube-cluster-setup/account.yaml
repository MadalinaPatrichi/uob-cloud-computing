---
# the namespace for the account

apiVersion: v1
kind: Namespace
metadata:
  name: {accountnamespace}

---
# the service account to provision for the user

apiVersion: v1
kind: ServiceAccount
metadata:
  name: {account}
  namespace: {accountnamespace}

---
# the role binding for this service account

kind: RoleBinding
apiVersion: rbac.authorization.k8s.io/v1beta1
metadata:
  name: default-role-binding
  namespace: {accountnamespace}
subjects:
- kind: ServiceAccount
  name: {account}
  namespace: {accountnamespace}
roleRef:
  kind: ClusterRole
  name: admin
  apiGroup: rbac.authorization.k8s.io

---
# now we want a prometheus user role for this user

kind: Role 
apiVersion: rbac.authorization.k8s.io/v1beta1
metadata:
  name: prometheus-admin
  namespace: {accountnamespace}
rules:
- apiGroups:
  - monitoring.coreos.com
  resources:
  - alertmanagers
  - prometheuses
  - prometheuses/finalizers
  - alertmanagers/finalizers
  - servicemonitors
  - prometheusrules
  verbs:
  - '*'

---
# allow this user to do prometheusy things in their namespace

kind: RoleBinding
apiVersion: rbac.authorization.k8s.io/v1beta1
metadata:
  name: prometheus-role-binding
  namespace: {accountnamespace}
subjects:
- kind: ServiceAccount
  name: {account}
  namespace: {accountnamespace}
roleRef:
  kind: Role
  name: prometheus-admin
  apiGroup: rbac.authorization.k8s.io

---
# these are the default limits applied to containers that don't specify a limit

apiVersion: v1
kind: LimitRange
metadata:
  name: default-requests-and-limits
  namespace: {accountnamespace}
spec:
  limits:
  - default:
      memory: {default_memory}
      cpu: {default_cpu}
    defaultRequest:
      memory: {default_memory}
      cpu: {default_cpu}
    type: Container

---
# this is the resource quota applied to the namespace

apiVersion: v1
kind: ResourceQuota
metadata:
  name: {account}-quota
  namespace: {accountnamespace}
spec:
  hard:
    requests.cpu: "{cpu_for_account}"
    requests.memory: "{memory_for_account}"
    limits.cpu: "{cpu_for_account}"
    limits.memory: "{memory_for_account}"
    services.loadbalancers: "0"
    services.nodeports: "10"
    persistentvolumeclaims: "2"
    requests.storage: "100Gi"
